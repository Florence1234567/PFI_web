@model ChatManager.Models.User

@{
    ViewBag.Title = "Profil";
    string formSubmitCaption = "Enregistrer";
}

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(m => m.Id)
    <div class="form-horizontal">

        <fieldset class="formField">
            <div class="legend">Identification</div>
            @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control", placeholder = @Html.DisplayNameFor(model => model.FirstName) } })
            @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
            <br />
            @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control", placeholder = @Html.DisplayNameFor(model => model.LastName) } })
            @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
        </fieldset>

        <div class="legend">@Html.DisplayNameFor(model => model.AvatarImageData)</div>
        @Helper.ImageUploader(Model.Id, "AvatarImageData", Model.GetAvatarURL(), "~/Images_Data/Loading_icon.gif", "Cliquez pour choisir votre avatar")
        @Html.ValidationMessageFor(model => model.AvatarImageData, "", new { @class = "text-danger" })

        <fieldset class="formField">
            <div class="legend">@Html.DisplayNameFor(model => model.UserTypeId)</div>
            @Helper.ListToRadioButtonGroup("UserTypeId", (SelectList)ViewBag.UserType, Model.UserTypeId)
        </fieldset>

        <fieldset class="formField">
            <div class="legend">@Html.DisplayNameFor(model => model.GenderId)</div>
            @Helper.ListToRadioButtonGroup("GenderId", (SelectList)ViewBag.Genders, Model.GenderId)
            @Html.ValidationMessageFor(model => model.GenderId, "", new { @class = "text-danger" })
        </fieldset>

        <fieldset class="formField">
            <div class="legend">@Html.DisplayNameFor(model => model.Email)</div>
            @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control", placeholder = @Html.DisplayNameFor(model => model.Email) } })
            @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
            <br />
            @Html.EditorFor(model => model.ConfirmEmail, new { htmlAttributes = new { @class = "form-control", placeholder = @Html.DisplayNameFor(model => model.ConfirmEmail) } })
            @Html.ValidationMessageFor(model => model.ConfirmEmail, "", new { @class = "text-danger" })
        </fieldset>

        @Html.HiddenFor(m => m.Password)
        @Html.HiddenFor(m => m.ConfirmPassword)

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="@formSubmitCaption" class="btn btn-default" />
            </div>
        </div>
    </div>
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/NotificationsHandler")

    <script defer>
        var unchangedPasswordCode = '@((string)Session["UnchangedPasswordCode"])';

        setUnchangedPassword();
        $("#ConfirmEmail").val($("#Email").val());
        $.validator.addMethod(
            "UserTypeId",
            function (value, element) { return ($("input[name='UserTypeId']:checked").val() != undefined); },
            "Choix obligatoire"
        );
    </script>
}
